// ----------------------------- Includes & Definitions -----------------------------
#include "secrets.h"
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "WiFi.h"
#include <Wire.h>
#include <hd44780.h>
#include <hd44780ioClass/hd44780_I2Cexp.h>
#include <NimBLEDevice.h>

// ----------------------------- Pin Definitions -----------------------------
#define MQ5_PIN           34
#define GREEN_LED_PIN     32
#define YELLOW_LED_PIN    14
#define RED_LED_PIN       33
#define BUZZER_PIN        25
#define STOP_BUTTON_PIN   26
#define RESET_BUTTON_PIN  27

// ----------------------------- Constants -----------------------------
#define WARNING_THRESHOLD     200.0
#define DANGER_THRESHOLD      400.0
#define RL_VALUE              6.2          // kÎ©
#define ADC_RESOLUTION        4095
#define CLEAN_AIR_RATIO       6.5
#define AWS_IOT_PUBLISH_TOPIC "esp32/pub"

// BLE UUIDs
#define SERVICE_UUID           "12345678-1234-1234-1234-1234567890ab"
#define CHARACTERISTIC_UUID    "abcd1234-5678-90ab-cdef-1234567890ab"

// ----------------------------- Global Variables -----------------------------

float Ro = 10.0;
float currentGasPPM = 0.0;
bool buzzerStopped = false;
bool resetTriggered = false;
bool resetCompleteDisplayed = false;
unsigned long resetCompleteTime = 0;

// ----------------------------- WiFi & MQTT Clients -----------------------------
WiFiClientSecure net = WiFiClientSecure();
PubSubClient client(net);

// ----------------------------- LCD -----------------------------
hd44780_I2Cexp lcd;
int lcdStatus;

// ----------------------------- BLE -----------------------------
NimBLEServer* pServer;
NimBLECharacteristic* pGasCharacteristic;

// ----------------------------- BLE Callbacks -----------------------------
class MyBLECallbacks : public NimBLEServerCallbacks {
  void onConnect(NimBLEServer* pServer) {
    Serial.println("BLE client connected");
    lcd.clear(); lcd.setCursor(0, 0); lcd.print("BLE Connected");
  }

  void onDisconnect(NimBLEServer* pServer) {
    Serial.println("BLE client disconnected");
    lcd.clear(); lcd.setCursor(0, 0); lcd.print("BLE Disconnected");
  }
};

// ----------------------------- Helper Functions -----------------------------
void setupBLE() {
  NimBLEDevice::init("ESP32_GasMonitor");
  pServer = NimBLEDevice::createServer();
  pServer->setCallbacks(new MyBLECallbacks());

  NimBLEService *pService = pServer->createService(SERVICE_UUID);
  pGasCharacteristic = pService->createCharacteristic(CHARACTERISTIC_UUID,
                        NIMBLE_PROPERTY::READ | NIMBLE_PROPERTY::NOTIFY);
  pGasCharacteristic->setValue("0.0");
  pService->start();
  NimBLEAdvertising* pAdvertising = NimBLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->start();

  Serial.println("BLE service started");
}

float readMQ6PPM(int pin, float ro);

float calibrateMQ6(int pin) {
  lcd.clear();
  lcd.print("Calibrating MQ6");
  Serial.println("Calibrating MQ6");
  delay(5000);

  long totalReadings = 0;
  for (int i = 0; i < 500; i++) {
    int rawValue = analogRead(pin);
    float voltage = rawValue * (3.3 / 4095.0);
    float sensorResistance = ((3.3 * RL_VALUE) / voltage) - RL_VALUE;
    totalReadings += sensorResistance;
    delay(10);
    
  }

  float calibrationValue = totalReadings / 500.0;

  lcd.clear();
  lcd.print("Calib. Complete");
  lcd.setCursor(0, 1);
  lcd.print(calibrationValue);
  Serial.print("Calibration value:");
  Serial.println(calibrationValue);
  delay(2000);

  return calibrationValue;
}


float readMQ6PPM(int pin, float ro) {
  int rawValue = analogRead(pin);
  float voltage = rawValue * (3.3 / ADC_RESOLUTION);
  float rs = ((3.3 * RL_VALUE) / voltage) - RL_VALUE;
  float ratio = rs / ro;
  float a=2.3;
  float b=-0.47;

  return pow((rs / ro) / a, 1 / b);
}


void publishMessage() {
  JsonDocument doc;
  doc["gas_concentration"] = currentGasPPM;
  char jsonBuffer[512];
  serializeJson(doc, jsonBuffer);
  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  lcd.clear(); lcd.print("Connecting WiFi");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500); Serial.print(".");
    lcd.setCursor(attempts % 16, 1); lcd.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("WiFi connected"); Serial.println(WiFi.localIP());
    lcd.clear(); lcd.print("WiFi Connected");
    lcd.setCursor(0, 1); lcd.print(WiFi.localIP()); delay(1000);
  } else {
    Serial.println("WiFi connection failed");
    lcd.clear(); lcd.print("WiFi Failed"); delay(1000);
    ESP.restart();
  }
}

void connectAWS() {
  connectToWiFi();
  net.setCACert(AWS_CERT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);
  client.setServer(AWS_IOT_ENDPOINT, 8883);

  Serial.println("Connecting to AWS IoT...");
  int retries = 0;
  while (!client.connected() && retries < 5) {
    if (client.connect(THINGNAME)) break;
    retries++; delay(1000); Serial.print(".");
  }

  if (!client.connected()) {
    Serial.println("AWS IoT Timeout!");
    ESP.restart();
  }
  Serial.println("AWS IoT Connected!");
}


void updateAlerts(float gas_ppm) {
  // Only handle buzzer if in danger zone
  if (gas_ppm > DANGER_THRESHOLD) {
    if (!buzzerStopped) {
      digitalWrite(RED_LED_PIN, HIGH);
      digitalWrite(YELLOW_LED_PIN, LOW);
      digitalWrite(GREEN_LED_PIN, LOW);
      ledcWrite(0, 128);  // Buzzer ON
    }
  } else if (gas_ppm > WARNING_THRESHOLD) {
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(YELLOW_LED_PIN, HIGH);
    digitalWrite(GREEN_LED_PIN, LOW);
    ledcWrite(0, 0);  // Buzzer OFF
  } else {
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(YELLOW_LED_PIN, LOW);
    digitalWrite(GREEN_LED_PIN, HIGH);
    ledcWrite(0, 0);  // Buzzer OFF
  }

  // Reset buzzerStopped flag when danger clears
  if (gas_ppm <= DANGER_THRESHOLD) {
    buzzerStopped = false;
  }
}


void performReset() {
  lcd.clear(); lcd.print("Resetting...");
  Serial.println("Device Reset Triggered");

  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF); delay(1000);
  WiFi.mode(WIFI_STA);
  connectToWiFi(); connectAWS();
  Ro = calibrateMQ6(MQ5_PIN);

  buzzerStopped = false;
  resetTriggered = true;
  digitalWrite(RED_LED_PIN, LOW);
  digitalWrite(YELLOW_LED_PIN, LOW);
  digitalWrite(GREEN_LED_PIN, HIGH);
  ledcWrite(0, 0);
  resetCompleteTime = millis();
  resetCompleteDisplayed = true;
  resetTriggered = false;
}

void handleButton() {
  static unsigned long lastDebounceTime = 0;
  const unsigned long debounceDelay = 50;

  if (digitalRead(STOP_BUTTON_PIN) == LOW && currentGasPPM > DANGER_THRESHOLD) {
    unsigned long currentTime = millis();
    if ((currentTime - lastDebounceTime) > debounceDelay) {
      buzzerStopped = true;
      ledcWrite(0, 0);  // Turn off buzzer
      digitalWrite(RED_LED_PIN, LOW);
      digitalWrite(YELLOW_LED_PIN, LOW);
      digitalWrite(GREEN_LED_PIN, HIGH);
      Serial.println("Buzzer manually stopped!");
    }
    lastDebounceTime = currentTime;
  }
}


void handleResetButton() {
  static unsigned long lastDebounceTime = 0;
  const unsigned long debounceDelay = 50;

  if (digitalRead(RESET_BUTTON_PIN) == LOW) {
    unsigned long currentTime = millis();
    if ((currentTime - lastDebounceTime) > debounceDelay) {
      performReset();
    }
    lastDebounceTime = currentTime;
  }
}

// ----------------------------- FreeRTOS Tasks -----------------------------
void taskWiFiMQTT(void *pvParameters) {
  connectAWS();
  vTaskDelete(NULL);
}


void taskLCD(void *pvParameters) {
  while (1) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Gas: ");
    lcd.print(currentGasPPM, 2);
    lcd.print(" PPM");
    lcd.setCursor(0, 1);

    if (currentGasPPM <= WARNING_THRESHOLD) {
      lcd.print("Safe Level");
    } else if (currentGasPPM <= DANGER_THRESHOLD) {
      lcd.print("Critical Level");
    } else {
      lcd.print("Danger Level");
    }

    Serial.printf("Gas: %.2f PPM\n", currentGasPPM);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}


void taskPublish(void *pvParameters) {
  while (1) {
    publishMessage();
    client.loop();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void taskBLE(void *pvParameters) {
  while (1) {
    char buf[16];
    dtostrf(currentGasPPM, 4, 2, buf);
    pGasCharacteristic->setValue(buf);
    pGasCharacteristic->notify();
    vTaskDelay(2000 / portTICK_PERIOD_MS);
  }
}

void taskAlertsAndButtons(void *pvParameters) {
  while (1) {
    handleButton();
    handleResetButton();
    updateAlerts(currentGasPPM);
    vTaskDelay(200 / portTICK_PERIOD_MS);
  }
}

void taskGasSensor(void *pvParameters) {
  while (1) {
    currentGasPPM = readMQ6PPM(MQ5_PIN, Ro);
    vTaskDelay(1000 / portTICK_PERIOD_MS); // Read every second
  }
}


// ----------------------------- Setup & Loop -----------------------------
void setup() {
  Serial.begin(115200);

  lcdStatus = lcd.begin(16, 2);
  if (lcdStatus) {
    Serial.print("LCD init failed, status: "); Serial.println(lcdStatus);
    while (1);
  }

  lcd.setBacklight(true);
  lcd.clear(); lcd.setCursor(0, 0); lcd.print("MQ5 Calibrating...");
  Ro = calibrateMQ6(MQ5_PIN);
  lcd.clear(); lcd.setCursor(0, 0); lcd.print("MQ5 Gas Monitor");
  delay(2000);

  setupBLE();

  pinMode(GREEN_LED_PIN, OUTPUT);
  pinMode(YELLOW_LED_PIN, OUTPUT);
  pinMode(RED_LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(STOP_BUTTON_PIN, INPUT_PULLUP);
  pinMode(RESET_BUTTON_PIN, INPUT_PULLUP);

  ledcSetup(0, 2000, 8);
  ledcAttachPin(BUZZER_PIN, 0);

  // FreeRTOS Tasks
  xTaskCreate(taskAlertsAndButtons, "AlertsButtons", 8192, NULL, 4, NULL);
  xTaskCreate(taskGasSensor, "GasSensor", 4096, NULL, 3, NULL);
  xTaskCreate(taskPublish, "Publish", 4096, NULL, 2, NULL);
  xTaskCreate(taskLCD, "LCD", 4096, NULL, 1, NULL);
  xTaskCreate(taskBLE, "BLE", 4096, NULL, 1, NULL);
  xTaskCreate(taskWiFiMQTT, "WiFiMQTT", 8192, NULL, 1, NULL);
}

void loop() {
  // FreeRTOS handles everything
} 

/*String getHTMLPage() {
    return R"=====(
<!DOCTYPE html>
<html>
<head>
    <title>Remote Gas Monitor</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.3.7/mqtt.min.js"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            text-align: center; 
            max-width: 600px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        #reading { 
            font-size: 2em; 
            padding: 20px; 
            border-radius: 10px; 
            margin-bottom: 20px;
        }
        .safe { color: green; background-color: #e6ffe6; }
        .warning { color: orange; background-color: #fff3e6; }
        .danger { color: red; background-color: #ffe6e6; }
        .resetting { color: #FF8C00; background-color: #fff3e6; }
        .control-buttons {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }
        .button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
        }
        .stop-button {
            background-color: #FFA500;
            color: white;
        }
        .reset-button {
            background-color: #FF4500;
            color: white;
        }
        .button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        #lastUpdate {
            color: #666;
            margin: 10px 0;
            font-size: 0.9em;
        }
        .disconnected {
            color: #666 !important;
            background-color: #f0f0f0 !important;
            opacity: 0.8;
        }
        .loading-state {
            animation: pulse 2s infinite;
            color: #666;
            background-color: #f5f5f5;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.6; }
            100% { opacity: 1; }
        }
        
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-indicator.online {
            background-color: #4CAF50;
            box-shadow: 0 0 5px #4CAF50;
        }
        
        .status-indicator.offline {
            background-color: #666;
        }
        
        .connection-status {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <h1>Gas Sensor Monitor</h1>
    <div class="connection-status">
        <span class="status-indicator offline"></span>
        <span id="connectionText">Connecting...</span>
    </div>
    <div id="reading" class="loading-state">Connecting to device...</div>
    <div id="lastUpdate">Initializing...</div>
    <div class="control-buttons">
        <button id="stopBuzzerBtn" class="button stop-button" disabled>Stop Buzzer</button>
        <button id="resetDeviceBtn" class="button reset-button" disabled>Reset Device</button>
    </div>

    <script>
        // Use WebSocket to connect directly to the ESP32 device instead of MQTT
        // for local connections
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = ${wsProtocol}//${window.location.hostname}:81;
        const ws = new WebSocket(wsUrl);
        
        let lastReading = null;
        let lastUpdateTime = null;
        let connectionTimeout = null;
        let isResetting = false;
        let isDeviceOnline = false;

        function updateConnectionStatus(connected) {
            const lastUpdateEl = document.getElementById('lastUpdate');
            const readingEl = document.getElementById('reading');
            const connectionTextEl = document.getElementById('connectionText');
            const statusIndicator = document.querySelector('.status-indicator');
            const stopBuzzerBtn = document.getElementById('stopBuzzerBtn');
            const resetDeviceBtn = document.getElementById('resetDeviceBtn');
            
            // Update device online status
            isDeviceOnline = connected && lastReading;
            
            if (isDeviceOnline) {
                connectionTextEl.textContent = 'Device Online';
                statusIndicator.classList.remove('offline');
                statusIndicator.classList.add('online');
                
                if (isResetting) {
                    // If we're resetting and device comes back online, stop resetting mode
                    isResetting = false;
                }
                
                readingEl.classList.remove('loading-state', 'disconnected');
                lastUpdateEl.textContent = 'Last Updated: Just now';
                stopBuzzerBtn.disabled = lastReading?.status === 'safe';
                
                // Only enable reset button if device is online and not in resetting mode
                resetDeviceBtn.disabled = isResetting;
            } else {
                const isConnecting = connected && !lastReading;
                connectionTextEl.textContent = isConnecting ? 'Connecting...' : 'Device Offline';
                statusIndicator.classList.remove('online');
                statusIndicator.classList.add('offline');
                
                if (isConnecting) {
                    // Don't change reading display if we're in resetting mode
                    if (!isResetting) {
                        readingEl.textContent = 'Connecting to device...';
                        readingEl.classList.add('loading-state');
                        readingEl.classList.remove('disconnected');
                        lastUpdateEl.textContent = 'Initializing...';
                    }
                } else {
                    if (!isResetting) {
                        readingEl.classList.add('disconnected');
                        readingEl.classList.remove('loading-state');
                        if (lastReading) {
                            readingEl.textContent = ${lastReading.ppm.toFixed(2)} PPM;
                            lastUpdateEl.textContent = Last Updated: ${lastUpdateTime.toLocaleString()};
                        } else {
                            readingEl.textContent = 'Waiting for device...';
                            lastUpdateEl.textContent = 'No data received yet';
                        }
                    }
                }
                
                stopBuzzerBtn.disabled = true;
                
                // Always disable reset button when device is offline
                resetDeviceBtn.disabled = true;
            }
        }

        // WebSocket event handlers
        ws.onopen = () => {
            console.log('WebSocket connection established');
            updateConnectionStatus(true);
        };

        ws.onclose = () => {
            console.log('WebSocket connection closed');
            updateConnectionStatus(false);
        };

        ws.onerror = (error) => {
            console.error('WebSocket error:', error);
            updateConnectionStatus(false);
        };

        ws.onmessage = (event) => {
            try {
                if (event.data === "RESET_COMPLETE") {
                    isResetting = false;
                    updateConnectionStatus(true);
                    return;
                }
                
                const data = JSON.parse(event.data);
                lastReading = data;
                lastUpdateTime = new Date();
                
                if (!isResetting) {
                    updateDisplay(data);
                }
                
                updateConnectionStatus(true);
                
                if (connectionTimeout) clearTimeout(connectionTimeout);
                connectionTimeout = setTimeout(() => updateConnectionStatus(false), 10000);
            } catch (e) {
                console.error('Error parsing message:', e);
            }
        };

        function updateDisplay(data) {
            const reading = document.getElementById('reading');
            reading.textContent = ${data.ppm.toFixed(2)} PPM;
            
            // Determine status based on PPM value
            let status = 'safe';
            if (data.ppm > 500) {
                status = 'danger';
            } else if (data.ppm > 300) {
                status = 'warning';
            }
            
            reading.className = reading ${status};

            const stopBuzzerBtn = document.getElementById('stopBuzzerBtn');
            stopBuzzerBtn.disabled = status === 'safe';
        }

        document.getElementById('stopBuzzerBtn').onclick = () => {
            fetch('/stop-buzzer', {
                method: 'POST'
            }).then(response => {
                if (response.ok) {
                    console.log('Buzzer stopped successfully');
                }
            }).catch(error => {
                console.error('Error stopping buzzer:', error);
            });
        };

        document.getElementById('resetDeviceBtn').onclick = () => {
            // Set resetting flag
            isResetting = true;
            
            // Update display to show "Resetting..."
            const readingEl = document.getElementById('reading');
            readingEl.textContent = 'Resetting...';
            readingEl.className = 'reading resetting';
            
            // Disable buttons during reset
            document.getElementById('resetDeviceBtn').disabled = true;
            document.getElementById('stopBuzzerBtn').disabled = true;
            
            // Send reset command via HTTP POST
            fetch('/reset', {
                method: 'POST'
            }).then(response => {
                if (response.ok) {
                    console.log('Reset command sent successfully');
                }
            }).catch(error => {
                console.error('Error sending reset command:', error);
                // Restore UI if reset fails
                isResetting = false;
                updateConnectionStatus(true);
            });
        };

        // Update button states initially
        updateConnectionStatus(false);
    </script>
</body>
</html>
)=====";
}*/
